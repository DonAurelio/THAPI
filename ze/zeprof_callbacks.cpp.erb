#include <ze_api.h>
#include <ze_ddi.h>
#include <zet_api.h>
#include <zet_ddi.h>
#include <zes_api.h>
#include <zes_ddi.h>
#include "babeltrace2/babeltrace.h"
#include "babeltrace_ze.h"
#include "zeprof.h"
#include "xprof_utils.h"
#include <iomanip>
#include <vector>
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <tuple>
#include <climits>
#include "zeprof_callbacks.h"
#include <set>

/* Callback */

<% $dbt_events.each do | dbt_event | %>
static void zeprof_<%= dbt_event.lltng_name %>_callback(
   <%= dbt_event.fields.join(",\n  ") %>
){
   <%if dbt_event.lltng_name.start_with?('lttng_ust_ze_') %>
  const hostname_t   hostname   = borrow_hostname(bt_evt);
  const process_id_t process_id = borrow_process_id(bt_evt);
  const thread_id_t  thread_id  = borrow_thread_id(bt_evt);  
  int64_t ns_from_origin;
  bt_clock_snapshot_get_ns_from_origin(bt_clock, &ns_from_origin);
     <%if dbt_event.lltng_name.end_with?("start") %>
  api_call[hpt_command_name_t(hostname,process_id, thread_id, "<%= dbt_event.name %>")].start(ns_from_origin);
     <%elsif dbt_event.lltng_name.end_with?("stop") %>
  api_call[hpt_command_name_t(hostname,process_id, thread_id, "<%= dbt_event.name %>")].stop(ns_from_origin);
     <% end %>
      
         <% if dbt_event.name.include?("zeCommandListAppendMemory") and  dbt_event.fields.any? {|n| n.include?("size_t size")} %>
  memory_trafic[hpt_command_name_t(hostname,process_id, thread_id, "<%= dbt_event.name %>")].delta(size);
         <% end %>
    
  <% end %>
};
<% end %>

<%#
 ___
  |  ._  o _|_ o  _. | o _   _
 _|_ | | |  |_ | (_| | | /_ (/_

%>

void init_callbacks(struct ze_dispatch   *ze_dispatch) {
<% $dbt_events.each do | dbt_event| %>
  ze_register_callback(ze_dispatch, "<%= dbt_event.lltng_event %>", (void *) &zeprof_<%= dbt_event.lltng_name %>_callback);
<% end %>
}

<%#
  _
 |_ o ._   _. | o _   _
 |  | | | (_| | | /_ (/_

%>

void finalize_callbacks() {
   std::string display {bt_value_string_get(display_mode)};
   if (display == "compact" ) {
  <% ['api_call','device_id_result','memory_trafic'].each do |a| %>
    print_compact_<%= a %>();
  <% end %>
   } else if (display == "extended" ) {
  <% ['api_call','device_id_result','memory_trafic'].each do |a| %>
     print_extented_<%= a %>();
  <% end %>
   }
}
